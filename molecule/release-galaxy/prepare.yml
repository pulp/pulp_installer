---
- hosts: all
  tasks:
    - name: Ensure dnf is not installed, which would conflict with ansible-pulp-rpm
      yum:
        name:
          - python2-dnf
          - python2-libdnf
          - dnf-data
          - libdnf
        state: absent
        use_backend: yum
      when:
        - ansible_os_family == "RedHat"
        - ansible_distribution_major_version|int == 7

    # Note: Technically these are only needed for the packages-upgrade scenario now, and it is
    # CentOS 8.3
    - name: Migrate CentOS 8 to CentOS Stream 8
      block:
        - name: Get latest CentOS 8 GPG keys and its temporary dependency
          dnf:
            name:
              - https://vault.centos.org/8.5.2111/BaseOS/x86_64/os/Packages/centos-gpg-keys-8-3.el8.noarch.rpm
              - https://vault.centos.org/8.5.2111/BaseOS/x86_64/os/Packages/centos-linux-repos-8-3.el8.noarch.rpm
            disablerepo:
              - baseos
              - appstream
              - extras
          retries: 50
          delay: 6
          register: result
          until: result is succeeded
          failed_when: result is failed or "Failure downloading" in result.msg
          when:
            - ansible_distribution == "CentOS"
            - ansible_distribution_version in ["8.3","8.4"]

        - name: Switch to CentOS 8 Stream repos
          command: dnf -y --disablerepo * --enablerepo extras swap centos-linux-repos centos-stream-repos

        - name: Finish CentOS 8 Stream migration
          dnf:
              name:
                - centos-stream-release
                - centos-gpg-keys
      when:
        - ansible_distribution == "CentOS"
        - ansible_distribution_version in ["8.3","8.4","8.5"]

    - name: Create /etc/pulp/certs
      file:
        path: /etc/pulp/certs
        state: directory

    - name: Generate galaxy signing service gpg key
      shell: |
        cat >gpg.txt <<EOF
        %echo Generating a basic OpenPGP key
        Key-Type: default
        Key-Length: 4096
        Subkey-Type: default
        Subkey-Length: default
        Name-Real: Joe Tester
        Name-Comment: with no passphrase
        Name-Email: joe@foo.bar
        Expire-Date: 0
        %no-ask-passphrase
        %no-protection
        # Do a commit here, so that we can later print "done" :-)
        %commit
        %echo done
        EOF
        gpg --batch --gen-key gpg.txt
        gpg --output /etc/pulp/certs/galaxy_signing_service.gpg --armor --export-secret-key
        gpg --output /etc/pulp/certs/galaxy_signing_service.asc --armor --export
        rm -rf ~/.gnupg

    - name: Create /var/lib/pulp/scripts
      file:
        path: /var/lib/pulp/scripts
        state: directory

    - name: Create sample galaxy signing service script (EL7)
      copy:
        content: |
          #!/usr/bin/env bash

          FILE_PATH=$1
          SIGNATURE_PATH="$1.asc"
          
          ADMIN_ID="$PULP_SIGNING_KEY_FINGERPRINT"
          PASSWORD="password"
          
          # Create a detached signature
          gpg --quiet --batch --yes --passphrase \
             $PASSWORD --homedir ~/.gnupg/ --detach-sign --default-key $ADMIN_ID \
             --armor --output $SIGNATURE_PATH $FILE_PATH
          
          # Check the exit status
          STATUS=$?
          if [ $STATUS -eq 0 ]; then
             echo {\"file\": \"$FILE_PATH\", \"signature\": \"$SIGNATURE_PATH\"}
          else
             exit $STATUS
          fi
        dest: /var/lib/pulp/scripts/collection_sign.sh
        mode: 0755
      when:
        - ansible_facts.os_family == 'RedHat'
        - ansible_facts.distribution_major_version|int == 7

    - name: Create sample galaxy signing service script
      copy:
        content: |
          #!/usr/bin/env bash

          FILE_PATH=$1
          SIGNATURE_PATH="$1.asc"
          
          ADMIN_ID="$PULP_SIGNING_KEY_FINGERPRINT"
          PASSWORD="password"
          
          # Create a detached signature
          gpg --quiet --batch --pinentry-mode loopback --yes --passphrase \
             $PASSWORD --homedir ~/.gnupg/ --detach-sign --default-key $ADMIN_ID \
             --armor --output $SIGNATURE_PATH $FILE_PATH
          
          # Check the exit status
          STATUS=$?
          if [ $STATUS -eq 0 ]; then
             echo {\"file\": \"$FILE_PATH\", \"signature\": \"$SIGNATURE_PATH\"}
          else
             exit $STATUS
          fi
        dest: /var/lib/pulp/scripts/collection_sign.sh
        mode: 0755
      when:
        - (ansible_facts.os_family != 'RedHat') or (ansible_facts.distribution_major_version|int != 7)
