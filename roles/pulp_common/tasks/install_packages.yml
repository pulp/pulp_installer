---
- name: Prepare to install the Pulp packages
  block:
    - name: "Enumerate the list of updates from the {{ __pulp_pkg_repo_name }} repo"
      yum:
        list: updates
        disablerepo: "*"
        enablerepo: "{{ __pulp_pkg_repo_name }}"
      register: updates

    - name: List packages to be upgraded
      debug:
        # We do not use json_query because it requires jmespath on the control
        # node. We should not introduce an addtl control node dependency
        # unless there is a very compelling reason.
        # msg: "{{ updates | json_query('results[*].name') }}"
        msg: "{{ updates.results | map(attribute='name')|list }}"

    # These 3 tasks have changed_when: false for the sake if idempotency
    # We are not modifying the system after all, just the value of the conf file
    - name: generate a temporary dnf.conf
      block:

        - name: Generate a temp filepath for the temp dnf.conf
          tempfile:
            state: file
            suffix: .repoupdates.dnf.conf
          register: __dnf_conf
          changed_when: false

        - name: Copy system dnf.conf to temp dnf.conf
          copy:
            src: /etc/dnf/dnf.conf
            dest: "{{ __dnf_conf.path }}"
            remote_src: true
            mode: 0644
            owner: root
            group: root
          changed_when: false

        # The example being:
        # python3-pulpcore depends on rq < 1.7
        # the pulpcore repo has rq 1.5
        # EPEL8 has rq 1.7
        # Without this, the update task below would fail.
        #
        # Only really needed for CentOS 8. Fedora 33 defaults to best=False.
        - name: Modify the temp dnf.conf to permit updating to newer but not the latest RPMS
          ini_file:
            path: "{{ __dnf_conf.path }}"
            section: main
            option: best
            value: "False"
            no_extra_spaces: true
            mode: 0644
            owner: root
            group: root
          changed_when: false

      when: ansible_pkg_mgr == "dnf"

    - name: Upgrade all existing installed Pulp packages
      yum:
        name: "{{ updates.results | map(attribute='name')|list }}"
        state: latest  # noqa 403
        conf_file: "{{ __dnf_conf.path | default(omit) }}"
        # update_only is a needed part of installing older updates
        update_only: true
      notify:
        - Collect static content
        - Restart all Pulp services
      tags:
        # When upgrading from very early RPMs (like 3.3), this task happens twice
        - molecule-idempotence-notest

  become: true
  when:
    - ansible_facts.os_family == "RedHat"
    - pulp_pkg_upgrade_all

- name: Install the Pulp packages
  block:

    - name: "Install the Pulp undeclared {{ ansible_facts.pkg_mgr }} package dependencies"
      package:
        name: "{{ pulp_pkg_undeclared_deps }}"
        state: "{{ pulp_pkg_upgrade_all | ternary('latest','present') }}"
        exclude: '{{ pulp_pkg_exclude | default(omit) }}'
      notify:
        - Collect static content
        - Restart all Pulp services

    - name: "Install pulpcore via {{ ansible_facts.pkg_mgr }} packages"
      package:
        name: >-
          {{ pulp_pkg_pulpcore_name }}
          {% if pulpcore_version | default('') | length -%}
          = {{ pulpcore_version }}
          {%- endif -%}
        state: "{{ pulp_pkg_upgrade_all | ternary('latest','present') }}"
        exclude: '{{ pulp_pkg_exclude | default(omit) }}'
      notify:
        - Collect static content
        - Restart all Pulp services

    - name: "Install Pulp plugins via {{ ansible_facts.pkg_mgr }} packages"
      package:
        name: >-
          {{ pulp_pkg_name_prefix }}{{ __pulp_common_package.key }}
          {% if __pulp_common_package.value.version | default('') | length -%}
          = {{ __pulp_common_package.value.version }}
          {%- endif -%}
        state: "{{ pulp_pkg_upgrade_all | ternary('latest','present') }}"
        exclude: '{{ pulp_pkg_exclude | default(omit) }}'
      # We use pulp_install_plugins rather than pulp_install_plugins_normalized
      # so that users can specify package names with underscores if distros
      # require it.
      loop: '{{ pulp_install_plugins | dict2items }}'
      loop_control:
        loop_var: __pulp_common_package
      when:
        - __pulp_common_package.value.pkg_name is undefined
      notify:
        - Collect static content
        - Restart all Pulp services

    - name: "Install Pulp plugins (with overriden names) via {{ ansible_facts.pkg_mgr }}"
      package:
        name: >-
          {{ __pulp_common_package.value.pkg_name }}
          {% if __pulp_common_package.value.version | default('') | length -%}
          = {{ __pulp_common_package.value.version }}
          {%- endif -%}
        state: "{{ pulp_pkg_upgrade_all | ternary('latest','present') }}"
      loop: '{{ pulp_install_plugins | dict2items }}'
      loop_control:
        loop_var: __pulp_common_package
      when:
        - __pulp_common_package.value.pkg_name is defined
      notify:
        - Collect static content
        - Restart all Pulp services

    - name: "Install gunicorn via {{ ansible_facts.pkg_mgr }} packages"
      package:
        name: "{{ pulp_pkg_name_prefix }}gunicorn"
        state: present

    - name: "Install Pulp SELinux policies via {{ ansible_facts.pkg_mgr }}"
      package:
        name: "{{ pulp_pkg_selinux_name }}"
        state: "{{ pulp_pkg_upgrade_all | ternary('latest','present') }}"
      when:
        - ansible_facts.os_family == 'RedHat'
        # when permissive or enforcing. That would be stored in .mode & .config_mode
        - pulp_install_selinux_policies|bool or
          (ansible_facts.selinux.status == "enabled" and pulp_install_selinux_policies == "auto")

  become: true

# Some logic later on varies depending on the pulpcore version.
- name: Gather package facts
  package_facts:
    manager: "auto"

- name: Set __pulpcore_version to the RPM that was installed
  set_fact:
    __pulpcore_version: "{{ ansible_facts.packages[pulp_pkg_pulpcore_name].0.version }}"
  when: pulpcore_version | default('') | length == 0
...
