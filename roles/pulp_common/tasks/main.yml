---

- name: pulp_install_plugins
  debug:
    var: pulp_install_plugins
    verbosity: 1
- name: pulp_install_plugins_normalized_yml
  debug:
    var: pulp_install_plugins_normalized_yml
    verbosity: 1
- name: pulp_install_plugins_normalized
  debug:
    var: pulp_install_plugins_normalized
    verbosity: 1

- name: Check if required variables are set
  assert:
    that:
      # This check runs it through jinja2 templating twice: built-in
      # "that:" (like when:), and then the {{ }}
      # It converts from item, to the string like pulp_default_admin_password ,
      # to the value of pulp_default_admin_password .
      - "{{ __pulp_common_req_var }} | default('', true) | length > 0"
    fail_msg: >
      {{ __pulp_common_req_var }} is undefined, null, an empty string, or an empty dictionary "{}" . Please
      set it in your variables
      (e.g. pulp_installer/playbooks/example-use/group_vars/all)
      and run pulp_installer again.
      See https://docs.pulpproject.org/pulp_installer/ or
      pulp_installer/roles/pulp/README.md for more info.
  loop:
    - pulp_settings.content_origin
    - pulp_settings.secret_key
    - pulp_install_plugins
  loop_control:
    loop_var: __pulp_common_req_var

- name: Check required roles if FIPS detected
  assert:
    that:
      - (developer_user is defined or developer_user_home is defined) or (pulp_install_source == 'packages')
    fail_msg: >
      Pulp cannot run in a FIPS environment because Django (a dependency) is not FIPS
      compatible
  when: ansible_facts.fips

- name: Load OS specific variables
  include_vars: "{{ lookup('first_found', params) }}"
  vars:
    params:
      files:
        - '{{ ansible_facts.distribution }}-{{ ansible_facts.distribution_major_version }}.yml'
        - '{{ ansible_facts.distribution }}.yml'
        - '{{ ansible_facts.os_family }}-{{ ansible_facts.distribution_major_version }}.yml'
        - '{{ ansible_facts.os_family }}.yml'
      paths:
        - 'vars'
  tags:
    - always

- name: Is this a supported version of CentOS
  fail:
    msg: Pulp Installer only supports CentOS 7.7 or higher.
  when:
    - ansible_facts.distribution == 'CentOS'
    - ansible_facts.distribution_version|float < 7.7

# This has to be before we Gather package facts so that ansible's apt module
# can install python3-apt.
# Otherwise, gathering facts will fail if this is the 1st role run.
- name: Update apt package index
  apt:
    update_cache: yes
  when: ansible_facts.distribution == 'Debian'
  # This is a lie, but necessary for Idempotence test
  changed_when: False

- name: Gather package facts
  package_facts:
    manager: "auto"

- name: If in packages mode, check if we are upgrading from a supported version
  fail:
    msg: >
      Pulp version {{ ansible_facts.packages['python3-pulpcore'].0.version }} is installed.
      Pulp Installer does not support support upgrading from RPM packages prior to 3.6.
      Please run Pulp Installer 3.14 with a 3.14 repo, then this version of Pulp Installer.
  when:
    - pulp_install_source == 'packages'
    # python3-pulpcore was the package name back in the < 3.15 era
    - ansible_facts.packages['python3-pulpcore'].0.version | default('99.99') is version('3.6', '<')

# Note: We cannot use `systemd-path search-binaries-default` because
# it wasn't added until systemd 239. Thus no CentOS 7 or Fedora 28
# support, etc.
- name: Enumerate default system PATH
  # pipefail is not needed due to grep's rc, but it resolves ansible-lint 306
  shell: |
    set -o pipefail
    export PATH=$(systemctl show-environment | grep -E '^PATH=' | sed 's/PATH=//g')
    {% if 'rh-postgresql10' in ansible_facts.packages %}
      source /opt/rh/rh-postgresql10/enable
    {% endif %}
    echo $PATH
  args:
    # Debian defaults to bourne, but it doesn't understand pipefail.
    executable: /bin/bash
  changed_when: false
  register: systemd_show_env_path
  check_mode: false
  # This task typically doesn't need root, but on some user systems it does.
  become: yes

- name: systemd_show_env_path
  debug:
    var: systemd_show_env_path

- name: set the default system PATH as a fact
  set_fact:
    default_bin_path: "{{ systemd_show_env_path.stdout }}"

- name: Enable repositories needed by Pulp
  include_role:
    name: pulp_repos
  vars:
    __pulp_repos_centos_crb_repo_enable_default: True
    __pulp_repos_centos_powertools_repo_enable_default: True
    __pulp_repos_epel_enable_default: True
    __pulp_repos_rhel_codeready_enable_default: True
    __pulp_repos_rhel_optional_enable_default: True
    __pulp_rhel_pulpcore_repo_enable_default: True
    __pulp_rhel_scl_repo_enable_default: True

- import_tasks: install.yml
- import_tasks: configure.yml

- name: Install pulpcore service
  template:
    src: pulpcore.service.j2
    dest: /lib/systemd/system/pulpcore.service
    owner: root
    group: root
    mode: 0644
  become: true
  notify: Restart all Pulp services

# We need to flush handlers before we run the service roles,
# which would start & install the services.
- name: Flush handlers
  meta: flush_handlers

- name: Set state of pulpcore app (block)
  block:
    - name: Set state of pulpcore app
      systemd:
        daemon_reload: true
        name: pulpcore.service
        state: started
        enabled: true
      become: true

  rescue:
    - name: Set state of pulpcore app (retry)
      systemd:
        daemon_reload: true
        name: pulpcore.service
        state: started
        enabled: true
      become: true
      # This task is occassionally failing. We are assuming it to be a timing issue,
      # with the restarting of the service that just happened, and are thus
      # adding these retries.
      retries: 5
      delay: 12
      register: result_restart_service
      until: result_restart_service is succeeded
      tags:
        - molecule-notest

    - name: Print status of pulpcore services and fail
      include_tasks: print_status_and_fail.yml
      when:
        - result_restart_service is not defined
