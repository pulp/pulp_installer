---
- name: Set config fact
  set_fact:
    __pulp_real_sole_database_config_host: "{{ inventory_hostname }}"

- name: Check if required variables are set
  assert:
    that:
      # This check runs it through jinja2 templating twice: built-in
      # "that:" (like when:), and then the {{ }}
      # It converts from item, to the string like pulp_default_admin_password ,
      # to the value of pulp_default_admin_password .
      - "{{ __pulp_database_config_req_variable }} | default('', true) | length > 0"
    fail_msg: >
      {{ __pulp_database_config_req_variable }} is undefined, null, or an empty string. Please
      set it in your variables
      (e.g. pulp_installer/playbooks/example-use/group_vars/all)
      and run pulp_installer again.
      See https://docs.pulpproject.org/pulp_installer/ or
      pulp_installer/roles/pulp/README.md for more info.
  loop:
    - pulp_default_admin_password
  loop_control:
    loop_var: __pulp_database_config_req_variable

- name: Flush handlers
  meta: flush_handlers

- name: Import Pulp Database Encryption Key
  copy:
    src: "{{ pulp_db_fields_key }}"
    dest: "{{ __pulp_db_fields_key_path }}"
    owner: 'root'
    group: "{{ pulp_group }}"
    mode: 0640
  notify: Restart all Pulp services
  when: pulp_db_fields_key | length

- import_tasks: generate_database_fields_key.yml
  when:
    - not pulp_db_fields_key | length

- block:
    - name: Run database migrations
      command: '{{ pulp_django_admin_path }} migrate --no-input'
      register: result
      changed_when: "'No migrations to apply' not in result.stdout"

    - name: Check if admin account has been created
      command: >
        {{ pulp_django_admin_path }} shell -c
        'from django.contrib.auth import get_user_model; print(get_user_model().objects.filter(username="admin").exists())'
      register: __pulp_database_config_admin_account_exists
      changed_when: false
      check_mode: false

    - name: Set the Pulp admin user's password
      command: "{{ pulp_django_admin_path }} reset-admin-password --password {{ pulp_default_admin_password }}"
      no_log: true
      when: (__pulp_database_config_admin_account_exists.stdout == "False" ) | default(false)

  run_once: "{{ __pulp_database_config_run_once }}"
  become: true
  become_user: '{{ pulp_user }}'
  environment:
    PULP_SETTINGS: "{{ pulp_settings_file }}"
    LD_LIBRARY_PATH: "{{ pulp_ld_library_path }}"
    PULP_DEPLOY_ROOT: "{{ pulp_user_home }}"
    PULP_MEDIA_ROOT: "{{ pulp_media_root }}"
    PULP_STATIC_ROOT: "{{ pulp_user_home }}/assets"
    PULP_WORKING_DIRECTORY: "{{ pulp_user_home }}/tmp"
    PULP_FILE_UPLOAD_TEMP_DIR: "{{ pulp_user_home }}/tmp"

# This task is located here in pulp_database_config because it depends on the database fields encryption key
# and on the database migrations having been run.
- name: Add the galaxy signing service to the Pulp application
  shell: >
    {{ pulp_django_admin_path }} add-signing-service
    {{ __pulp_common_merged_pulp_settings.galaxy_collection_signing_service }}
    {{ pulp_scripts_dir }}/collection_sign.sh {{ galaxy_signing_key.stdout }}
  run_once: "{{ __pulp_database_config_run_once }}"
  environment:
    PULP_SETTINGS: "{{ pulp_settings_file }}"
    LD_LIBRARY_PATH: "{{ pulp_ld_library_path }}"
    PULP_SIGNING_KEY_FINGERPRINT: "{{ galaxy_signing_key.stdout }}"
  register: result
  changed_when: result.rc == 0
  failed_when: >
    (result.rc not in [0,1]) or
    ((result.rc == 1) and ('Key (name)=(ansible-default) already exists.' not in result.stderr))
  when: galaxy_create_default_collection_signing_service
  become: true
  become_user: "{{ pulp_user }}"
